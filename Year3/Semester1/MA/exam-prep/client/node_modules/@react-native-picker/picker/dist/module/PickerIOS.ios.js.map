{"version":3,"sources":["PickerIOS.ios.js"],"names":["React","processColor","StyleSheet","View","RNCPickerNativeComponent","Commands","iOSPickerCommands","useMergeRefs","refs","useCallback","current","ref","PickerIOSItem","props","PickerIOSWithForwardedRef","forwardRef","PickerIOS","forwardedRef","children","selectedValue","selectionColor","themeVariant","testID","itemStyle","numberOfLines","onChange","onValueChange","style","nativePickerRef","useRef","nativeSelectedIndex","setNativeSelectedIndex","useState","value","items","selectedIndex","useMemo","Children","toArray","map","child","index","String","label","textColor","color","parsedNumberOfLines","Math","round","useLayoutEffect","jsValue","forEach","shouldUpdateNativePicker","global","nativeFabricUIManager","setNativeProps","_onChange","event","nativeEvent","newValue","newIndex","styles","pickerIOS","create","height","Item"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n *\n * This is a controlled component version of RNCPickerIOS\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport * as React from 'react';\nimport {processColor, StyleSheet, View} from 'react-native';\nimport RNCPickerNativeComponent, {\n  Commands as iOSPickerCommands,\n} from './RNCPickerNativeComponent';\nimport type {SyntheticEvent} from 'react-native/Libraries/Types/CoreEventTypes';\nimport type {ViewProps} from 'react-native/Libraries/Components/View/ViewPropTypes';\nimport type {\n  ColorValue,\n  TextStyleProp,\n} from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport type {Element, ChildrenArray} from 'react';\n\ntype PickerIOSChangeEvent = SyntheticEvent<\n  $ReadOnly<{|\n    newValue: number | string,\n    newIndex: number,\n  |}>,\n>;\n\ntype RNCPickerIOSItemType = $ReadOnly<{|\n  label: ?Label,\n  value: ?(number | string),\n  textColor: ?ColorValue,\n  testID: ?string,\n|}>;\n\ntype Label = Stringish | number;\n\ntype Props = $ReadOnly<{|\n  ...ViewProps,\n  // $FlowFixMe\n  children: ChildrenArray<Element<typeof PickerIOSItem>>,\n  itemStyle?: ?TextStyleProp,\n  numberOfLines: ?number,\n  onChange?: ?(event: PickerIOSChangeEvent) => mixed,\n  onValueChange?: ?(itemValue: string | number, itemIndex: number) => mixed,\n  selectedValue: ?(number | string),\n  selectionColor: ?string,\n  themeVariant: ?string,\n|}>;\n\ntype ItemProps = $ReadOnly<{|\n  label: ?Label,\n  value?: ?(number | string),\n  color?: ?ColorValue,\n  testID?: ?string,\n|}>;\n\ntype CallbackRef<T> = (T) => mixed;\ntype ObjectRef<T> = {current: T, ...};\n\ntype Ref<T> = CallbackRef<T> | ObjectRef<T>;\n\n/**\n * Constructs a new ref that forwards new values to each of the given refs. The\n * given refs will always be invoked in the order that they are supplied.\n *\n * WARNING: A known problem of merging refs using this approach is that if any\n * of the given refs change, the returned callback ref will also be changed. If\n * the returned callback ref is supplied as a `ref` to a React element, this may\n * lead to problems with the given refs being invoked more times than desired.\n */\nfunction useMergeRefs<T>(...refs: $ReadOnlyArray<?Ref<T>>): CallbackRef<T> {\n  return React.useCallback(\n    (current: T) => {\n      for (const ref of refs) {\n        if (ref != null) {\n          if (typeof ref === 'function') {\n            ref(current);\n          } else {\n            ref.current = current;\n          }\n        }\n      }\n    },\n    [...refs], // eslint-disable-line react-hooks/exhaustive-deps\n  );\n}\n\n// $FlowFixMe\nconst PickerIOSItem: RNCPickerIOSItemType = (props: ItemProps): null => {\n  return null;\n};\n\nconst PickerIOSWithForwardedRef: React.AbstractComponent<\n  Props,\n  React.ElementRef<typeof RNCPickerNativeComponent>,\n> = React.forwardRef(function PickerIOS(props, forwardedRef): React.Node {\n  const {\n    children,\n    selectedValue,\n    selectionColor,\n    themeVariant,\n    testID,\n    itemStyle,\n    numberOfLines,\n    onChange,\n    onValueChange,\n    style,\n  } = props;\n\n  const nativePickerRef = React.useRef<React.ElementRef<\n    typeof RNCPickerNativeComponent,\n  > | null>(null);\n\n  // $FlowFixMe\n  const ref = useMergeRefs(nativePickerRef, forwardedRef);\n\n  const [nativeSelectedIndex, setNativeSelectedIndex] = React.useState({\n    value: null,\n  });\n\n  const [items, selectedIndex] = React.useMemo(() => {\n    // eslint-disable-next-line no-shadow\n    let selectedIndex = 0;\n    // eslint-disable-next-line no-shadow\n    const items = React.Children.toArray<$FlowFixMe>(children).map(\n      (child, index) => {\n        if (child === null) {\n          return null;\n        }\n        if (String(child.props.value) === String(selectedValue)) {\n          selectedIndex = index;\n        }\n        return {\n          value: String(child.props.value),\n          label: String(child.props.label),\n          textColor: processColor(child.props.color),\n          testID: child.props.testID,\n        };\n      },\n    );\n    return [items, selectedIndex];\n  }, [children, selectedValue]);\n\n  let parsedNumberOfLines = Math.round(numberOfLines ?? 1);\n  if (parsedNumberOfLines < 1) {\n    parsedNumberOfLines = 1;\n  }\n\n  React.useLayoutEffect(() => {\n    let jsValue = 0;\n    React.Children.toArray<$FlowFixMe>(children).forEach(function (\n      child: $FlowFixMe,\n      index: number,\n    ) {\n      if (String(child.props.value) === String(selectedValue)) {\n        jsValue = index;\n      }\n    });\n    // This is necessary in case native updates the switch and JS decides\n    // that the update should be ignored and we should stick with the value\n    // that we have in JS.\n    const shouldUpdateNativePicker =\n      nativeSelectedIndex.value != null &&\n      nativeSelectedIndex.value !== jsValue;\n    if (shouldUpdateNativePicker && nativePickerRef.current) {\n      if (global?.nativeFabricUIManager) {\n        iOSPickerCommands.setNativeSelectedIndex(\n          nativePickerRef.current,\n          jsValue,\n        );\n      } else {\n        nativePickerRef.current.setNativeProps({\n          selectedIndex: jsValue,\n        });\n      }\n    }\n  }, [selectedValue, nativeSelectedIndex, children]);\n\n  const _onChange = React.useCallback(\n    (event: $FlowFixMe) => {\n      onChange?.(event);\n      onValueChange?.(event.nativeEvent.newValue, event.nativeEvent.newIndex);\n      setNativeSelectedIndex({value: event.nativeEvent.newIndex});\n    },\n    [onChange, onValueChange],\n  );\n\n  return (\n    <View style={style}>\n      <RNCPickerNativeComponent\n        ref={ref}\n        themeVariant={themeVariant}\n        testID={testID}\n        style={[styles.pickerIOS, itemStyle]}\n        // $FlowFixMe\n        items={items}\n        onChange={_onChange}\n        numberOfLines={parsedNumberOfLines}\n        selectedIndex={selectedIndex}\n        selectionColor={processColor(selectionColor)}\n      />\n    </View>\n  );\n});\n\nconst styles = StyleSheet.create({\n  pickerIOS: {\n    // The picker will conform to whatever width is given, but we do\n    // have to set the component's height explicitly on the\n    // surrounding view to ensure it gets rendered.\n    height: 216,\n  },\n});\n\n// $FlowFixMe\nPickerIOSWithForwardedRef.Item = PickerIOSItem;\n\nexport default PickerIOSWithForwardedRef;\n"]}