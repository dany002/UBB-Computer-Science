ID: 0
Execution stack:
RefType IntegerType a; new(a, 20); For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
RefType IntegerType a
new(a, 20); For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
new(a, 20); For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

ID: 0
Execution stack:
new(a, 20)
For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

ID: 0
Execution stack:
For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
IntegerType v
v = 1
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
v = 1
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 20
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
RefType IntegerType a; new(a, 20); For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
RefType IntegerType a
new(a, 20); For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
new(a, 20); For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

ID: 0
Execution stack:
new(a, 20)
For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

ID: 0
Execution stack:
For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
For( v = 1;  v < 3;  v = (v + 1)){ fork(print(v); v = (v * readHeap(v)))};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
IntegerType v
v = 1
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
v = 1
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 20
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
RefType IntegerType a; IntegerType v; new(a, 20); For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
RefType IntegerType a
IntegerType v; new(a, 20); For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
IntegerType v; new(a, 20); For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

ID: 0
Execution stack:
IntegerType v
new(a, 20); For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
Output:
Filetable:
Heap:

ID: 0
Execution stack:
new(a, 20); For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:

ID: 0
Execution stack:
new(a, 20)
For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(0,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:

ID: 0
Execution stack:
For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};; print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
For( v = 0; (v < 3); v = (v + 1)){ fork(print(v); v = (v * readHeap(a)))};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
v = 0
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
fork(print(v); v = (v * readHeap(a))); v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
fork(print(v); v = (v * readHeap(a)))
v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 1
Execution stack:
print(v); v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 1
Execution stack:
print(v)
v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output:
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
fork(print(v); v = (v * readHeap(a))); v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 1
Execution stack:
v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
fork(print(v); v = (v * readHeap(a)))
v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 1
Execution stack:
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 0
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 2
Execution stack:
print(v); v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 2
Execution stack:
print(v)
v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 0
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
fork(print(v); v = (v * readHeap(a))); v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 2
Execution stack:
v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 1
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
fork(print(v); v = (v * readHeap(a)))
v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 2
Execution stack:
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 20
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
v = (v + 1)
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 3
Execution stack:
print(v); v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
While((v < 3)){fork(print(v); v = (v * readHeap(a))); v = (v + 1)};
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 3
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 3
Execution stack:
print(v)
v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0 1
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
print(readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 3
Output: 0 1 2
Filetable:
Heap:
1(IntegerType):-> 20

ID: 3
Execution stack:
v = (v * readHeap(a))
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 2
Output: 0 1 2
Filetable:
Heap:
1(IntegerType):-> 20

ID: 0
Execution stack:
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 3
Output: 0 1 2 20
Filetable:
Heap:
1(IntegerType):-> 20

ID: 3
Execution stack:
SymTable: 
a(RefType IntegerType):-> Ref(1,IntegerType)
v(IntegerType):-> 40
Output: 0 1 2 20
Filetable:
Heap:
1(IntegerType):-> 20

