ID: 0
Execution stack:
BooleanType a; a = false; IntegerType v; if(a)then { v = 2} else {v = 3}
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
BooleanType a
a = false; IntegerType v; if(a)then { v = 2} else {v = 3}
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
a = false; IntegerType v; if(a)then { v = 2} else {v = 3}
SymTable: 
a(BooleanType):-> false
Output:
Filetable:
Heap:

ID: 0
Execution stack:
a = false
IntegerType v; if(a)then { v = 2} else {v = 3}
SymTable: 
a(BooleanType):-> false
Output:
Filetable:
Heap:

ID: 0
Execution stack:
IntegerType v; if(a)then { v = 2} else {v = 3}
SymTable: 
a(BooleanType):-> false
Output:
Filetable:
Heap:

ID: 0
Execution stack:
IntegerType v
if(a)then { v = 2} else {v = 3}
SymTable: 
a(BooleanType):-> false
Output:
Filetable:
Heap:

ID: 0
Execution stack:
if(a)then { v = 2} else {v = 3}
SymTable: 
a(BooleanType):-> false
v(IntegerType):-> 0
Output:
Filetable:
Heap:

ID: 0
Execution stack:
v = 3
SymTable: 
a(BooleanType):-> false
v(IntegerType):-> 0
Output:
Filetable:
Heap:

ID: 0
Execution stack:
SymTable: 
a(BooleanType):-> false
v(IntegerType):-> 3
Output:
Filetable:
Heap:

ID: 0
Execution stack:
IntegerType v; v = 20; For( v = 0; (v < 3); v = (v + 1)){ print((v * 10))};
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
IntegerType v
v = 20; For( v = 0; (v < 3); v = (v + 1)){ print((v * 10))};
SymTable:
Output:
Filetable:
Heap:

ID: 0
Execution stack:
v = 20; For( v = 0; (v < 3); v = (v + 1)){ print((v * 10))};
SymTable: 
v(IntegerType):-> 0
Output:
Filetable:
Heap:

ID: 0
Execution stack:
v = 20
For( v = 0; (v < 3); v = (v + 1)){ print((v * 10))};
SymTable: 
v(IntegerType):-> 0
Output:
Filetable:
Heap:

ID: 0
Execution stack:
For( v = 0; (v < 3); v = (v + 1)){ print((v * 10))};
SymTable: 
v(IntegerType):-> 20
Output:
Filetable:
Heap:

ID: 1
Execution stack:
NOP
SymTable:
Output:
Filetable:
Heap:

ID: 1
Execution stack:
NOP
SymTable:
Output:
Filetable:
Heap:

ID: 1
Execution stack:
SymTable:
Output:
Filetable:
Heap:

